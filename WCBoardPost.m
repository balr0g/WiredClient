/* $Id$ */

/*
 *  Copyright (c) 2008-2009 Axel Andersson
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 2009-11-30 21:06:51.278 Wired Client[86371:a0f] post list message = wired.board.post_list = {
	wired.board.own_post = true
	wired.board.post = 4D262E03-25BF-4D2F-A5ED-F9713D0C7478
	wired.board.post_date = 2009-11-10 22:14:44 +0100
	wired.board.text = "sdf
sd
fsdf
sdf
sdfssdf
sd
fsdf
sdf
sdfssdf
sd
fsdf
sdf
sdfssdf
sd
fsdf
sdf
sdfssdf
sd
fsdf
sdf
sdfssdf
sd
fsdf
sdf
sdfssdf
sd
fsdf
sdf
sdfssdf
sd
fsdf
sdf
sdfssdf
sd
fsdf
sdf
sdfssdf
sd
fsdf
sdf
sdfssdf
sd
fsdf
sdf
sdfssdf
sd
fsdf
sdf
sdfs"
	wired.board.thread = F39E9D11-5DD7-4480-AECB-0A914A995D3A
	wired.transaction = 10
	wired.user.icon = 89504E47 0D0A1A0A 0000000D 49484452 00000020 00000020 08060000 00737A7A F4000007 48494441 545809ED 560B6C55 E51DFFDD 739FED7D F6E105DB 425B5B18 751564DD 005B1ECE 6D155731 41BA00B3 18C42C9B B5187C00 C6076E18 872859C7 30CE4704 E6832846 71190F0D 18D4B232 1FD4068A B3B45A46 6FAD9652 EFE5F6BE CEB90F7F FF73B95A 9AA164D9 B298F84F 7EE73BE7 3BDFF7FD 7FFFE739 C077F27F F680E13F D06FE29E E2337073 4C1283C4 71A28FF8 9F49394F 5E4BB411 2122350A 437CDE4F 341279C4 79C9F978 C0C193EE 246E263C B0F27A91 09E6423B 6C2E2B12 8914A2A7 A348F686 818F1369 7FF08EAB 1E203613 5F2BDF44 A08CBB9F 26AA9163 80FB6763 50357D32 268C9F00 B79DDEE7 EE881681 3FEA475F E0531CEF ED45EF21 1FB47D7E 20A6EBDD CAEB7262 98C8222C 449C100F EAF27504 44F96E62 22AA6D98 B9A01A35 17CF80DB EA46480D 132184E2 6144E311 84135144 88602284 CFA243E8 EF1D44F0 954F800E 559448C8 C2F9F9F9 63727272 B27C3E9F 168944FE C5B96789 A7CE45C0 C9977B89 E9A6AB3C A8ADBF1C 538B26A3 22FF7B70 5A9D3870 E2208E0E FE930422 184EA409 84532AD4 541C1A53 23C534D5 A2710CBF D08BE4DF C330180C 282F2FC7 FCF9F3B1 74E9521C 3870004D 4D4D5055 B5F15C04 1EA4F2D5 4A4D36AA AFAF4191 7B2C0A1D 055835E7 36781D5E 6C3DF434 36BCF767 0C6AC318 4E6A0825 34984C46 D84D2618 15039246 834E22AE 2610DAF4 113DA1F1 B8B47477 77A3ACAC 0CB5B5B5 D8BB776F 8F927931 629CC8FB 9BE15550 5CC72898 B9DFDF8D 63816E74 0D76A13F C858078E 63284977 33FE13AD 795856FC 135CE628 4620AE22 C9135346 7A81A619 5D265896 8D4F479E 872E5AB4 08E3C68D 43201080 10A1AC96 9A1E2D37 72C261F9 693E548F 015DA17E C452099C F207B1B6 753D726C 2E7CE0FF 189FD2FD B57915D8 7CCD6328 F4142210 F1E3D657 57624BFF 7E86C906 C5442FF0 2073B91D EA5C272E 3F55858D 1B37C262 B1A0B9B9 193D3D3D ED7CBD6B 7408A4C8 DAE1324C 72AE2E83 D123490B D0AB48F0 B884216D 99A47F68 388CBFCC BE1FD7FF 6889BE46 2E077B0E A27A5703 9C1E1B35 2B2C8414 54866899 6736D657 AD43BE37 1F7BF6EC 415D5D5D 38954ACD E59696D1 1E90CC2F 532A6C30 E7D0F742 8F10774A 22990C8A 4E24188B A2C8EAC2 C47C89D6 57126175 2045A5CC 81181352 7AE41F27 35E2A6A9 8DB018CC D8B76F1F EAEBEB63 54FE1BEE 6A919D23 09B8F8FC 07C28CE2 6CC0AA20 C92623E6 0B012112 D05856F1 249A4AEB 70FB8CDB 50925B82 C1E020B2 2DD9F07D EEC3FAD6 66C69B96 6B31CC74 9760DD0F D660E6B8 59DC0C6C DFB11D0D 0B1BE29A A689F267 F4495E32 04647C82 B8525E28 B9662425 86671407 13712463 1AE6E655 6265D50A 5C51F663 F288E3F1 9627B0A1 F511E439 3C38A10D A25F8900 4E0BD694 2FC62D53 97232F2B 0F5126EA 9FDA3761 F5A3BF63 6D6A9216 6F8B8E8C 64083455 56562EEC ECECE41A 0D8A395D 46A7A938 45C5D31D E3B1FC87 BFC22F2A EB61315A 70E8441B EEDFFF7B FCB58F67 651BD16D 60A363D8 6BBD95B8 A76A1566 15A7ADFE 70E043DC D3721F5E 52996FEE 8CAA2F8D D639C8EC 58CA5D4C 0C747474 E893EA50 046A42C5 ACACF1B8 E1D2EBB0 A0E25AB8 98FD9FF8 FBF0D8C1 C7F1D0D1 E7105312 F8F9842A 94E794E2 68B013F5 25D7A0A1 E23A386C 4E5A1DC5 B3479EC3 DD879B31 60650F28 60170E27 E46C2609 D8A7BF12 21F0CB79 F3E65DB0 78F1623D 4393C924 AA2FAEC1 82D9F331 A7700EAC 261B4E06 07B0F1DD ADD87478 333E8A73 BFCB8895 E50B71DF 8C35B0DB EC88B10D 5BCD7401 A5F5442B D61D7A18 3B4FD398 0B58541E E6132B02 DD5179CD FE8C01B9 C9881058 E5F57A31 65CA14B4 B5B5E9D9 AE28E9FE D439D089 1D1D2F63 CBB11771 4CFB9C6E B440C9B2 33B95358 F2FD06D8 B3ED4CFA 94AEDCE7 F7E1A177 366053FF 6EE68191 7F0C54CC F0C04915 5D34BC5B F7C03FA8 2FFD993A C34008DC B96DDBB6 2DD3A64D 43696929 FC7E3FDE 6F7B1F6F 18DEC26B AE0F100E 93B98B8A 1D762836 23124C4E FA98DF80 A07E8494 A7C89387 9FA4F25D C08574B7 10E05AB0 1C914563 767F96FE 7B005ED4 178FB8C8 6EAEC46F 891B080F 718AF0A2 48B1B188 69315F4B 52B22C0D 74655276 84591128 C586C90F E0427B01 5AFB5AB1 ACFD2E9C 7433C9DD EC1F2C45 5D6C1C7D 34E0EA23 62F77B9C 9B499CE5 01392E23 B9BC915F AC21E276 E25E34E4 C2B0A214 ECC4699A 6291EC60 2F405083 35984271 320BC7E2 A7693515 0BAC5C20 C526ED53 ACFF3595 BF15E506 D411AF12 6789589F 1116B19E A1C2F01D A2068723 253AA519 748C8507 0A019D04 4713BB22 F59D3231 CBB37923 2E17A52A B54B9824 FE6BBBD8 EDE55F04 EC507854 6E46CB48 0223DFC9 F7F375E2 0AB40E8F 85E4C154 1773818A A43B8A3D 62A5C45F 129603E2 9C90515A 78882EBB BB13D8A1 E7C9F39C 95BF223D 0B399E25 E722208B E857EC24 2E417BA4 0CFB593D 0E2E2F60 B9496633 2F746FC8 28AE96B9 1899EDE4 BA5B68F9 11FD6FE8 11EE6F24 CE8A3B9F BF14E1FC 4D225FC8 15C4ADC4 18F94F40 B51D98C4 7FD5DCF4 D7122779 FE11F27D 93518C88 6B709458 4B6C9787 FF9614F1 A03B8816 42125534 65C04F9F DE64FEC6 710921BF 74E725E7 E3817F77 50012785 9094ADC4 564AB7F7 CCC8E13B F91679E0 0B937491 2350F7EC BC000000 0049454E 44AE4260 82
	wired.user.nick = "morris"
*/

#import "WCBoardPost.h"

@implementation WCBoardPost

+ (WCBoardPost *)postWithMessage:(WIP7Message *)message connection:(WCServerConnection *)connection {
	return [[[self alloc] initWithMessage:message connection:connection] autorelease];
}



- (id)initWithMessage:(WIP7Message *) message connection:(WCServerConnection *)connection {
	WIP7Bool	ownPost;
	
	self = [self initWithConnection:connection];
	
	[message getBool:&ownPost forName:@"wired.board.own_post"];
	
	_postID		= [[message UUIDForName:@"wired.board.post"] retain];
	_postDate	= [[message dateForName:@"wired.board.post_date"] retain];
	_editDate	= [[message dateForName:@"wired.board.edit_date"] retain];
	_text		= [[message stringForName:@"wired.board.text"] retain];
	_nick		= [[message stringForName:@"wired.user.nick"] retain];
	_icon		= [[[message dataForName:@"wired.user.icon"] base64EncodedString] retain];
	_ownPost	= ownPost;
	
	return self;
}



- (void)dealloc {
	[_postID release];
	[_postDate release];
	[_editDate release];
	[_nick release];
	[_icon release];
	[_text release];
	
	[super dealloc];
}



#pragma mark -

- (NSString *)description {
	return [NSSWF:@"<%@: %p>{id = %@, postdate = %@}",
		[self class], self, [self postID], [self postDate]];
}



#pragma mark -

- (NSString *)postID {
	return _postID;
}



- (NSDate *)postDate {
	return _postDate;
}



- (void)setEditDate:(NSDate *)editDate {
	[editDate retain];
	[_editDate release];
	
	_editDate = editDate;
}



- (NSDate *)editDate {
	return _editDate;
}



- (NSString *)nick {
	return _nick;
}



- (NSString *)icon {
	return _icon;
}



- (BOOL)isOwnPost {
	return _ownPost;
}



- (void)setText:(NSString *)text {
	[text retain];
	[_text release];
	
	_text = text;
}



- (NSString *)text {
	return _text;
}



- (void)setUnread:(BOOL)unread {
	_unread = unread;
}



- (BOOL)isUnread {
	return _unread;
}



#pragma mark -

- (NSComparisonResult)compareDate:(id)object {
	return [_postDate compare:[object postDate]];
}

@end
